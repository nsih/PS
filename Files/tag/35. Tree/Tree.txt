=개요=
그래프의 하위 개념으로 계층적 구조를 가지며 사이클이 없는 그래프.

*트리의 뿌리 :	최상위 노드
*트리의 지름 :	트리에서 임의의 두 점 사이의 거리 중 가장 긴 거리

=구현 및 활용처=

*트리가 몇 개인지 판별 

(n = 정점 개수)
def countTree(n, tree):
    visited = [False] * (n + 1)
    treeCount = 0

	#DFS로 노드에 연결된 노드 다 viseted로 바꾸는 함수 선언
    def isTree(v, parent):
        visited[v] = True
        for node in tree[v]:
            if not visited[node]:
                if not isTree(node, v):
                    return False
            elif node != parent:	#사이클이 있다면 그래프니까 false반환
                return False
        return True
	
	#메인 루프
    for i in range(1, n + 1):
        if not visited[i]:
            if isTree(i, -1):
                treeCount += 1
    return treeCount



*각노드의 부모를 알아낼때

1. 	tree = [[] for _ in range(n + 1)]
	리스트의 n번째 인덱스의 리스트에 n번 노드와 연결된 노드정보 리스트가 들어있다.

2. 	parent는 각 노드의 부모정보를 담고 있는 리스트다.

def bfs(root):
    queue = deque([root])
    parent[root] = -1

    while queue:
        current = queue.popleft()

        for neighbor in tree[current]:
            if parent[neighbor] == 0:
                parent[neighbor] = current
                queue.append(neighbor)


*트리의 지름을 알아낼때

1.	임의의 한 노드에서 가장 먼 노드를 찾는다.
2.	그 노드에서 다시 가장 먼 노드를 찾으면, 그 두 노드 사이의 거리가 트리의 지름.


tree: 각 노드의 연결 정보(간선)를 저장하는 리스트
line: 간선 정보 (idx노드와 연결된 노드, 비용)

BFS함수	파라메터 : 기준 노드 idx
		result[0] : 가장 먼 노드
		result[1] : result[0] 까지의 거리


def bfs(start):
    q = deque()
    q.append((start, 0))
    visited = [-1] * (n + 1)
    visited[start] = 0.

    result = [0, 0]

    while q:
        node, cost = q.popleft()

        for nextNode, nextCost in tree[node]:
            if visited[nextNode] == -1:
                calcCost = cost + nextCost
                q.append((nextNode, calcCost))
                visited[nextNode] = calcCost
                if result[1] < calcCost:
                    result[0] = nextNode
                    result[1] = calcCost

    return result


from collections import deque
import sys
INF = int(1e9)

n = int(sys.stdin.readline())

tree = [[] for _ in range(n + 1)]

for _ in range(n):
    line = list(map(int, input().split()))
    v = line[0]
    idx = 1
    while line[idx] != -1:
        node, cost = line[idx], line[idx+1]	(n번노드와 연결된 노드, cost)
        tree[v].append((node, cost))
        idx += 2

point1 = bfs(1)[0]   #1에서 제일 먼 노드
point2 = bfs(point1)[1] #point1에서 제일 먼 거리
print(point2)



